{
    "id": "VZWCatalog-rules", 
    "properties": {
        "secretSourcePipelineId": "VZWCatalog-rules"
    }, 
    "stages": [
        {
            "id": "0j", 
            "label": "Rules Security Trimming", 
            "licensed": true, 
            "script": "//var System = java.lang.System;\n//logger.info(\"User Dir: \" + System.getProperties().getProperty(\"user.dir\");\n\n\n//load(\"rules-common.js\");\nlogger.info(\"RULES SECRUITY TRIMMING\");\n\nfunction userHasAccess() {\n    var JSONArray = org.json.JSONArray;\n    var JSONObject = org.json.JSONObject;\n    var iter = java.util.Iterator;\n    var e = java.lang.Exception;\n    var Exception = java.lang.Exception;\n    var String = java.lang.String;\n    var target = \"query-pipelines/\" + request.getParams().getFirst(\"lw.pipelineId\") + \"/collections\";\n    var hasPermission = false;\n    var api = \"http://localhost:8764/api/roles\";\n    try {\n        var userRole = \"\";\n        logger.info(\"PARAMS ROLE: \"+ request.getParams().get(\"fusion-user-role\"));\n        if (request.getHeaders().get(\"Fusion-User-Role\") !== null) {\n\n            var role = request.getHeaders().get(\"Fusion-User-Role\").get(0);\n            var content = getUrlRequestContent(api);\n            var json = new JSONArray(content);\n            var obj, perm, perms, methods, path;\n            if (json !== null) {\n                obj = getUserRole(json, role);\n                if (obj !== null) {\n\n                    perms = obj.getJSONArray(\"permissions\");\n                    for (var j = 0; j < perms.length(); j++) {\n                        perm = perms.getJSONObject(j);\n                        methods = perm.getJSONArray(\"methods\");\n                        path = perm.getString(\"path\");\n                        logger.info(\"Check Path: \" + path);\n                        if (methods.toString().contains(\"GET\")) {\n                            if (path.contains(target)\n                                    || path.equals(\"/**\")) { // user has permission if any are true\n\n                                hasPermission = true;\n                                break;\n                            }\n                        }\n                    }\n\n                } else {\n\n                    throw new Exception(\"Invalid Role:  \" + role);\n                }\n            } else {\n\n                throw new Exception(\"No roles found. \");\n            }\n\n        } else {\n            iter = request.getHeaders().keySet().iterator();\n            var k,v;\n            while(iter.hasNext()){\n                k = iter.next();\n                v = request.getHeaders().getFirst(k);\n                logger.info(\"Header Key: \"+k+\"  value: \"+v+\" \\n\");\n            }\n            throw new Exception(\"No role in header. \");\n        }\n\n        if (!hasPermission) {\n            logger.warn(\"403 UNAUTHORIZED ACCESS...\");\n            throw new Exception(\"403: Unauthorized. \");\n        } else {\n            logger.info(\"User has permission...\");\n        }\n\n    } catch (e) {\n        logger.error(e);\n    }\n\n    return hasPermission;\n\n}\n\n\nfunction getUrlRequestContent(url) {\n    var BufferedReader = java.io.BufferedReader;\n    var InputStreamReader = java.io.InputStreamReader;\n    var userAgent = org.apache.http.HttpHeaders.USER_AGENT;\n    var HttpResponse = org.apache.http.HttpResponse;\n    var HttpClient = org.apache.http.client.HttpClient;\n    var HttpGet = org.apache.http.client.methods.HttpGet;\n    var HttpClientBuilder = org.apache.http.impl.client.HttpClientBuilder;\n    var StringBuffer = java.lang.StringBuffer;\n    var BasicCredentialsProvider = org.apache.http.impl.client.BasicCredentialsProvider;\n    var UsernamePasswordCredentials = org.apache.http.auth.UsernamePasswordCredentials;\n    var AuthScope = org.apache.http.auth.AuthScope;\n    var String = java.lang.String;\n    var e = java.lang.Exception;\n    result = new StringBuffer();\n    try {\n\n        var provider = new BasicCredentialsProvider();\n        var credentials = new UsernamePasswordCredentials(\"admin\", \"Verizon1!\");\n        provider.setCredentials(AuthScope.ANY, credentials);\n        var client = HttpClientBuilder.create().setDefaultCredentialsProvider(provider).build();\n        var request = new HttpGet(url);\n        request.addHeader(\"User-Agent\", userAgent);\n        var response = client.execute(request);\n        logger.info(\"RESPONSE Code : \" + response.getStatusLine().getStatusCode());\n        var rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n        var result = new StringBuffer();\n        var line = \"\";\n        while ((line = rd.readLine()) !== null) {\n            result.append(line);\n        }\n    } catch (e) {\n        logger.error(e);\n    }\n    logger.info(result);\n    return result.toString();\n}\n\nfunction getUserRole( json,  roleName) {\n     var JSONArray = org.json.JSONArray;\n    var JSONObject = org.json.JSONObject;\n        var temp = null;\n        if (json !== null) {\n            for (var i = 0; i < json.length(); i++) {\n                temp = json.getJSONObject(i);\n                if (temp.getString(\"name\").equals(roleName)) {\n                    return temp;\n                }\n            }\n        }\n        return null;\n    }\n\n\nlogger.info(\"CHECK USER ACCESS\");\nuserHasAccess();", 
            "secretSourceStageId": "0j", 
            "skip": true, 
            "type": "javascript-query"
        }, 
        {
            "condition": "request.getFirstParam('rules') != 'off'", 
            "id": "xplgcik9", 
            "label": "Rules: Set up 'tags' and 'now'", 
            "licensed": true, 
            "params": [
                {
                    "key": "nowx", 
                    "policy": "replace", 
                    "value": "2016-03-14"
                }, 
                {
                    "key": "tagsx", 
                    "policy": "default", 
                    "value": "PROD"
                }, 
                {
                    "key": "tags_excludex", 
                    "policy": "append", 
                    "value": "A"
                }, 
                {
                    "key": "defType", 
                    "policy": "default", 
                    "value": "edismax"
                }, 
                {
                    "key": "enableElevation", 
                    "policy": "default", 
                    "value": "true"
                }, 
                {
                    "key": "forceElevation", 
                    "policy": "default", 
                    "value": "true"
                }, 
                {
                    "key": "fl", 
                    "policy": "append", 
                    "value": "*,score,[elevated],[excluded]"
                }
            ], 
            "secretSourceStageId": "xplgcik9", 
            "skip": false, 
            "type": "set-params"
        }, 
        {
            "condition": "request.getFirstParam('rules') != 'off'", 
            "id": "n4jx17zf3bu766r", 
            "label": "Rules: Prepare sub-query", 
            "licensed": true, 
            "script": "var main_q = request.getFirstParam('q');\nif (main_q != '*:*' && main_q != '*') {\n  request.putSingleParam('main_q',main_q);\n} \n\nvar filters = request.getParam('fq');\nif (filters.size != 0) { \n  request.putSingleParam(\"filters\", java.lang.String.join(',',filters));\n}\n\nvar headers = request.headers;\nrequest.addParam('username', headers.getFirst('fusion-user-name'));\nrequest.addParam('roles', headers.get(\"fusion-role-names\"));\nrequest.addParam(\"headers\", headers.toString());\nrequest.putSingleParamIfAbsent('now', (new Date()).toISOString());\nrequest.putSingleParamIfAbsent('wt', 'json');", 
            "secretSourceStageId": "n4jx17zf3bu766r", 
            "skip": false, 
            "type": "javascript-query"
        }, 
        {
            "collection": "VZWCatalog_rules", 
            "condition": "request.getFirstParam('rules') != 'off'", 
            "handler": "select", 
            "headers": [], 
            "id": "35ndbo6r", 
            "key": "applicable_rules_data", 
            "label": "Rules: Retrieve Effective", 
            "licensed": true, 
            "method": "GET", 
            "params": [
                {
                    "key": "fq", 
                    "value": "-enabled:false"
                }, 
                {
                    "key": "q", 
                    "value": "{!lucene q.op=OR} {!switch v=$main_q case='-*:*' default=$keywords_q} {!switch v=$main_q case='-*:*' default=$contains_q} {!switch v=$main_q case='-*:*' default=$text_q} {!lucene v='*:* -search_terms:[* TO *]'}"
                }, 
                {
                    "key": "keywords_q", 
                    "value": "(+{!field f='search_terms_keywords' v=$main_q} +matching:keywords)"
                }, 
                {
                    "key": "contains_q", 
                    "value": "(+{!field f='search_terms_contains' v=$main_q} +matching:contains)"
                }, 
                {
                    "key": "text_q", 
                    "value": "(+{!edismax qf='search_terms' v=$main_q} +matching:text)"
                }, 
                {
                    "key": "fq", 
                    "value": "{!switch v=$filters case='*:* -filters:[* TO *]' default='{!lucene q.op=OR}{!terms f=filters v=$filters} (*:* -filters:[* TO *])'}"
                }, 
                {
                    "key": "fq", 
                    "value": "(*:* -username:[* TO *]) OR {!field f=username v=$username}"
                }, 
                {
                    "key": "fq", 
                    "value": "({!field f=effective_range v=$now} OR (*:* -effective_range:[* TO *]))"
                }, 
                {
                    "key": "fq", 
                    "value": "{!switch v=$tags tag=tags case='*:*'  default='{!terms f=tags v=$tags}'}"
                }, 
                {
                    "key": "fq", 
                    "value": "{!switch v=$tags_exclude tag=tags_exclude case='*:*'  default='-{!terms f=tags v=$tags_exclude}'}"
                }, 
                {
                    "key": "facet", 
                    "value": "on"
                }, 
                {
                    "key": "facet.sort", 
                    "value": "index"
                }, 
                {
                    "key": "facet.field", 
                    "value": "{!key=drill_down_tags}tags"
                }, 
                {
                    "key": "facet.missing", 
                    "value": "true"
                }, 
                {
                    "key": "facet.field", 
                    "value": "{!ex=tags,tags_exclude}tags"
                }, 
                {
                    "key": "debug", 
                    "value": "true"
                }
            ], 
            "parentParams": [
                "username", 
                "tags_exclude", 
                "tags", 
                "now", 
                "main_q", 
                "filters"
            ], 
            "rollupKeys": [], 
            "secretSourceStageId": "35ndbo6r", 
            "skip": false, 
            "type": "sub-query"
        }, 
        {
            "id": "y5j", 
            "label": "signals-to-QEC", 
            "licensed": true, 
            "script": "// this is some code for ripping out signals created `bq`'s and turning it into QueryElevationComponent elevateIds\n\nfunction getSortedKeys(obj) {\n    var keys = []; for(var key in obj) keys.push(key);\n    return keys.sort(function(a,b){return obj[b]-obj[a]});\n}\n\n//request.addParam('bq',\"id:3^7.1836734694\");  // dummy data to test with\n//request.addParam('bq',\"id:2^11.77551020408\");\n\nvar elevate_map = {};\n\nif (request.hasParam('bq')) {\n  var bqs = request.getParam('bq');\n  if (bqs) {\n    var i=0;\n    for (var n in bqs) {\n      var bq = bqs[n];\n      \n      var colon_pos = bq.indexOf(':');\n      var carat_pos = bq.indexOf('^');\n      var id = bq.substring(colon_pos+1,carat_pos);\n      var boost = bq.substring(carat_pos+1);\n      elevate_map[id] = boost;\n      \n      // request.putSingleParam(\"x\"+i, id + \" === \" + boost);  // debugging\n      i++;\n    }\n  }\n}\n\nrequest.putSingleParam('elevateIds', getSortedKeys(elevate_map).join(','));\n\n// forceElevation elevates and leverages 'sort' for the rest; if false sort would overrule and no elevation\nrequest.putSingleParam('forceElevation','true');", 
            "secretSourceStageId": "y5j", 
            "skip": true, 
            "type": "javascript-query"
        }, 
        {
            "condition": "request.getFirstParam('rules') != 'off'", 
            "id": "89kvs4i", 
            "label": "Rules: Process", 
            "licensed": true, 
            "script": "// Use QueryElevationComponent, for boost and filter list rules.  If false, boosts and blocks are done with query parser and fq trickery\n// *** NOTE: With QEC, boost and block lists are for `id` ONLY\nvar use_qec = false;  \n\nfunction set_rules_ordered_q(rule_doc) {\n  var rules_ordered_q = \"\"\n  for(var val_index=0; val_index < rule_doc.field_values.size(); val_index++) {\n    var item_param = 'rules_item_' + val_index;  // TODO: unique this param by rule id?\n    request.putSingleParam(item_param, rule_doc.field_values[val_index]);\n    rules_ordered_q += \"({!term f=\" + rule_doc.field_name + \" v=$\" + item_param + \"})^=\" + 100*(rule_doc.field_values.size() - val_index) + ' ';\n  }\n  \n  request.putSingleParam('rules_ordered_q', rules_ordered_q);\n}\n\n\n//var ST = Java.type('org.stringtemplate.v4.ST');\n//var template = new ST('context: <context> :: request: <request.firstParam(\"main_q\")>');\n//template.add('context',context);\n//template.add('request',request);\n//request.putSingleParam(\"ST\",template.render());\n\nif (!ctx.hasProperty('applicable_rules')) { exit; }\n// TODO: or if rules numFound == 0?\n// TODO: set some context data if no rules data or zero rules?\n\nvar applicable_rules_data = ctx.getProperty('applicable_rules_data');\n\nvar rules_to_exclude = request.getParam('rules.exclude');\n\n// Arrays of things to put into response (by way of the ctx/context and the post-Solr stage)\nvar rules_response = {\n  \"excluded_rules\": [],\n  \"banners\": [],\n  \"redirects\": [],\n  \"applicable_rules\": [],\n  \"applicable_rules_ids\": [],\n  \"applicable_rules_debug\": [],\n  \"rules_errors\": []\n};\n\nif (applicable_rules_data.response.docs.size() != applicable_rules_data.response.numFound) {\n   rules_response[\"rules_errors\"].push((\"Not all matched rules processed: size=\" + applicable_rules_data.response.docs.size() + \" numFound=\" + applicable_rules_data.response.numFound).toString());\n}\n\nfor(var rule_index=0; rule_index < applicable_rules_data.response.docs.size(); rule_index++) {\n  var rule_doc = applicable_rules_data.response.docs[rule_index];\n  rules_response[\"applicable_rules_ids\"].push(rule_doc.id);\n  rules_response[\"applicable_rules\"].push(rule_doc);\n  rules_response[\"applicable_rules_debug\"].push(rule_doc.toString());\n  var excluded = false;\n\n  if (rules_to_exclude) {\n    // TODO: optimize this check, add support for comma-separated values too\n    for (var i=0; i < rules_to_exclude.size(); i++) {\n      if (rule_doc.id == rules_to_exclude[i]) {\n        excluded = true;\n        rules_response[\"excluded_rules\"].push(rules_to_exclude[i]);\n        break;\n      }\n    }\n  }\n\n  if (!excluded) {\n    var rule_type = rule_doc.type;\n\n    // Add response values - every rule type can have multivalued parallel keys/values values\n    if (rule_doc.keys) {\n      for (var kx=0; kx < rule_doc.keys.size(); kx++) {\n        if (!rules_response[rule_doc.keys[kx]]) { rules_response[rule_doc.keys[kx]] = []; }\n        rules_response[rule_doc.keys[kx]].push(rule_doc.values[kx]);\n      }\n    }\n\n    switch (rule_type) {\n      case 'response_value':   // e.g. key=\"banner\", \"redirect\"... etc\n        // response values evolved to being available for all rule types, but if all you\n        // want to do is set a banner this placeholder type suffices\n        break;\n\n      case 'set_params':\n        for (var px=0; px < rule_doc.param_keys.size(); px++) {\n\n          switch (rule_doc.param_policies[px]) {\n            case 'append':\n              request.addParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n\n            case 'replace':\n              request.putSingleParam(rule_doc.param_keys[px], rule_doc.param_values[px]);\n              break\n          }\n        }\n        break;\n\n      case 'query_rewrite':\n        // effectively same as a set_params replace of q\n        if (rule_doc.new_q) { request.putSingleParam(\"q\", rule_doc.new_q[0]); }\n        break;\n\n      case 'boost':\n        // boost_param=bq, boost_query=id:2^5\n        // effectively same as a set_params append of boost or bq.\n        request.addParam(rule_doc.boost_param, rule_doc.boost_query);\n        break;\n\n      case 'block_list':\n        // TODO: use_qec here to set excludeIds?   with fq at least any field can be used for block values\n        // effectively same as set_params append of an fq\n        request.addParam(\"fq\", \"-{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n        break;\n\n      case 'filter_list':\n        // effectively same as set_params append of an fq, and a replace of q with `field_name:val1^=N... field_name:valN^=1` (when not using QEC)\n        request.addParam(\"fq\", \"{!terms f=\" + rule_doc.field_name + \"}\" + Java.type('java.lang.String').join(',',rule_doc.field_values));\n\n        if (use_qec) {\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        } else {\n          set_rules_ordered_q(rule_doc);\n          request.putSingleParam('q','{!lucene v=$rules_ordered_q}');\n        }\n\n        break;\n\n     case 'boost_list':\n        if (use_qec) {\n          // TODO: need to collect all boost_list rules together and make one list - Solr doesn't process multiple elevateIds it seems\n          request.addParam('elevateIds',Java.type('java.lang.String').join(',',rule_doc.field_values));\n        } else {\n          var orig_q = request.getFirstParam('q');\n          request.putSingleParam('orig_q',orig_q);\n          request.putSingleParam('orig_score','query({!edismax v=$orig_q})');\n          request.putSingleParam('orig_scaled','scale($orig_score,1,99)');\n        \n          set_rules_ordered_q(rule_doc);\n          request.putSingleParam('q','{!lucene}({!lucene v=$rules_ordered_q}) (-({!lucene v=$rules_ordered_q}) {!frange l=1 v=$orig_scaled})');\n        }\n\n        break;\n\n      default:\n        rules_response[\"rules_errors\"].push((\"Unknown rule type '\" + rule_type + \"' on rule \" + rule_doc.id).toString());\n        break;\n    }\n  }\n}\n\nctx.setProperty(\"rules_response\", rules_response);\n", 
            "secretSourceStageId": "89kvs4i", 
            "skip": false, 
            "type": "javascript-query"
        }, 
        {
            "allowFederatedSearch": false, 
            "httpMethod": "POST", 
            "id": "a61410a0-6090-4cb5-9a19-50338531c15b", 
            "label": "solr-query", 
            "licensed": true, 
            "responseSignalsEnabled": true, 
            "secretSourceStageId": "a61410a0-6090-4cb5-9a19-50338531c15b", 
            "skip": false, 
            "type": "solr-query"
        }, 
        {
            "condition": "request.getFirstParam('rules') != 'off'", 
            "id": "ipco9a4i", 
            "label": "Rules: Augment Response", 
            "licensed": true, 
            "script": "function add_to_response(key, list) {\n  if (list.length > 0) {\n      response.initialEntity.appendStringList(key, Java.to(list, Java.type('java.util.List')));\n  }\n}\n\nvar rules_response = ctx.getProperty(\"rules_response\")\nif (rules_response) {\n  for (var k in rules_response) {\n    add_to_response(k, rules_response[k]);\n  }\n\n  // Duplicate redirect responses to supported landing-pages\n  if (rules_response[\"redirect\"]) {\n    add_to_response('landing-pages', rules_response[\"redirect\"]);\n  }\n}\n\n// This only works with JSON response format (wt=json); TODO: maybe convert the data to JSON and emit as a string?\nresponse.initialEntity.appendObject(\"applicable_rules_data\", ctx.getProperty('applicable_rules_data'));\n\n", 
            "secretSourceStageId": "ipco9a4i", 
            "skip": false, 
            "type": "javascript-query"
        }
    ]
}